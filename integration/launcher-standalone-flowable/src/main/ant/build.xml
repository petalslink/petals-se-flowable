<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2015-2024 Linagora
 
 This program/library is free software: you can redistribute it and/or modify
 it under the terms of the New BSD License (3-clause license).

 This program/library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE. See the New BSD License (3-clause license)
 for more details.

 You should have received a copy of the New BSD License (3-clause license)
 along with this program/library; If not, see http://directory.fsf.org/wiki/License:BSD_3Clause/
 for the New BSD License (3-clause license).
-->
<project name="PEtALS integration Flowable component tests" default="all" basedir=".">

   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-esb.xml" classpath="${maven.plugin.classpath}" />
   </import>
   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-soapui.xml" classpath="${maven.plugin.classpath}" />
   </import>
   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-registry.xml" classpath="${maven.plugin.classpath}" />
   </import>
   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-esb-component.xml" classpath="${maven.plugin.classpath}" />
   </import>
   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-esb-sa.xml" classpath="${maven.plugin.classpath}" />
   </import>
   <import>
      <javaresource name="org/ow2/petals/integration/ant/petals-se-flowable-cli.xml" classpath="${maven.plugin.classpath}" />
   </import>
   <import>
      <javaresource name="org/ow2/petals/integration/ant/h2.xml" classpath="${maven.plugin.classpath}" />
   </import>

   <basename property="petalsCliDirName" file="${org.ow2.petals:petals-cli-distrib-zip:zip}" suffix=".zip" />
   <property name="petals.cli.home"
             value="${project.build.directory}/${project.artifactId}/petals-cli/${petalsCliDirName}" />
   <property name="petals.home" value="${project.build.directory}/${project.artifactId}/container" />
   <property name="bc-soap.properties" value="${petals.home}/conf/bc-soap.properties" />
   <property name="topology.container.name" value="sample-0" />

   <!-- Properties -->
   <property name="host1.port" value="7700" />
   <property name="host1.ip" value="localhost" />
   <property name="host1.username" value="petals" />
   <property name="host1.password" value="petals" />
   <property name="flowable-db.file" value="/tmp/flowable.db" />

   <!-- Used by soapui tasks -->
   <property name="soapui.projectFile"
             value="${project.build.directory}/${project.artifactId}/resources/soapui/ServiceInvocations-soapui-project.xml" />

   <!-- Target : Prepare -->
   <target name="prepare">
      <delete file="${flowable-db.file}.mv.db" />
      
      <!-- Create the properties file for BC SOAP -->
      <echo message="archiveService.url = http://localhost:8088/mockArchiveService${line.separator}"
            file="${bc-soap.properties}" />
      <echo message="notifyVacationService.url = http://localhost:8088/mockNotifyVacationService${line.separator}"
            file="${bc-soap.properties}"
            append="true" />
      <echo message="notifyTravelingService.url = http://localhost:8088/mockNotifyTravelingService${line.separator}"
            file="${bc-soap.properties}"
            append="true" />
   </target>

   <!-- Target : Deploy -->
   <target name="deploy">
      
      <echo message="Installing shared libraries..." />
      
      <jbi-install-shared-library file="${org.ow2.petals:petals-sl-groovy-3.0.9:jbi-shared-library}"
                                        port="${host1.port}"
                                        host="${host1.ip}"
                                        username="${host1.username}"
                                        password="${host1.password}" />
      
      <echo message="Installing and starting components..." />

      <parallel>
         <deployComponent url="${basedir}/deployables/petals-se-flowable.zip"
                          id="petals-se-flowable"
                          jmx.port="${host1.port}"
                          jmx.host="${host1.ip}"
                          jmx.user="${host1.username}"
                          jmx.pwd="${host1.password}">
            <params>
               <param name="jdbcUrl" value="jdbc:h2:tcp://localhost/${flowable-db.file}" />
            </params>
         </deployComponent>
         <deployComponent url="${org.ow2.petals:petals-bc-soap:jbi-component}"
                          id="petals-bc-soap"
                          jmx.port="${host1.port}"
                          jmx.host="${host1.ip}"
                          jmx.user="${host1.username}"
                          jmx.pwd="${host1.password}">
            <params>
               <param name="httpHost" value="localhost" />
               <param name="propertiesFile" value="file://${bc-soap.properties}" />
            </params>
         </deployComponent>
      </parallel>

      <echo message="Hacking database Flowable" />
      <sql driver="org.h2.Driver" url="jdbc:h2:tcp://localhost/${flowable-db.file}" userid="sa" password="">
         <classpath>
            <pathelement location="${com.h2database:h2:jar}" />
         </classpath>
         <transaction>
               ALTER TABLE ACT_GE_BYTEARRAY ALTER COLUMN NAME_ VARCHAR(512);
         </transaction>
      </sql>

      <echo message="Deploying and starting service assemblies..." />
      <parallel>
	      <deploySa url="${org.ow2.petals.samples.flowable:sa-flowable-vacation-sample:jbi-service-assembly}"
	                id="sa-flowable-vacation-sample"
	                jmx.port="${host1.port}"
	                jmx.host="${host1.ip}"
	                jmx.user="${host1.username}"
	                jmx.pwd="${host1.password}" />
	      <deploySa url="${org.ow2.petals.samples.flowable:sa-flowable-collaboration-sample:jbi-service-assembly}"
	                id="sa-flowable-collaboration-sample"
	                jmx.port="${host1.port}"
	                jmx.host="${host1.ip}"
	                jmx.user="${host1.username}"
	                jmx.pwd="${host1.password}" />
	      <deploySa url="${org.ow2.petals.integration.tests.se.flowable:sa-flowable-traveling:jbi-service-assembly}"
	                id="sa-flowable-traveling"
	                jmx.port="${host1.port}"
	                jmx.host="${host1.ip}"
	                jmx.user="${host1.username}"
	                jmx.pwd="${host1.password}" />
      </parallel>
   </target>


   <!-- Target : Run -->
   <target name="run">
      <echo message="Launching Flowable component tests..." />
      
      <petals-soapui-test testCase="Nominal TestCase without adjustment" />

      <!-- Wait the end of the process instance execution -->
      <echo message="Waiting the last service task execution of the business process..." />
      <petals-monit-read-logfiles id="partial-flows" dir="${petals.home}/logs/flow-monitoring" />
      <petals-extract-flow-step-info refid="partial-flows">
         <!-- Retrieve the initial flow that has created the process instance -->
         <flowStepCriteria name="traceCode" value="provideFlowStepBegin" />
         <flowStepCriteria name="flowStepInterfaceName"
                           value="{http://petals.ow2.org/samples/se-flowable/vacation/vacationService}vacation" />
         <flowStepCriteria name="flowStepOperationName"
                           value="{http://petals.ow2.org/samples/se-flowable/vacation/vacationService}new" />
         <flowStepInfo attribute="flowInstanceId" property="initial-flow-instance-id" />
         <flowStepInfo attribute="flowStepId" property="initial-flow-step-id" />
      </petals-extract-flow-step-info>
      <petals-extract-flow-step-info refid="partial-flows">
         <!-- Retrieve the flow associated to the process instance -->
         <flowStepCriteria name="traceCode" value="consumeExtFlowStepBegin" />
         <flowStepCriteria name="correlatedFlowInstanceId" value="${initial-flow-instance-id}" />
         <flowStepCriteria name="correlatedFlowStepId" value="${initial-flow-step-id}" />
         <flowStepCriteria name="processDefinition" value="vacationRequest" />
         <flowStepInfo attribute="flowInstanceId" property="process-instance-flow-instance-id" />
      </petals-extract-flow-step-info>
      <local name="serviceTaskExecutionFailed" />
      <waitfor maxwait="2"
               maxwaitunit="minute"
               checkevery="1"
               checkeveryunit="second"
               timeoutproperty="serviceTaskExecutionFailed">
         <resourcecontains resource="${petals.home}/logs/flow-monitoring/${process-instance-flow-instance-id}/petals.log"
                           substring="traceCode = 'consumeExtFlowStepEnd'"
                           casesensitive="true" />
      </waitfor>
      <fail message="Last service task invocation not found (flowInstanceId = ${process-instance-flow-instance-id})">
         <condition>
            <isset property="serviceTaskExecutionFailed" />
         </condition>
      </fail>

      <!--
         Assertions about MONIT traces
         Caution: new MONIT traces can have occured since the last use of 'petals-monit-read-logfiles' because of ansynchronous service
                  tasks. So it is needed to reload all MONIT traces in a new object.
      -->
      <echo message="Checking MONIT trace of this first process instance" />
      <echo message="a) Checking that MONIT traces are correctly read" />
      <petals-monit-read-logfiles id="flows" dir="${petals.home}/logs/flow-monitoring" />
      <petals-extract-flow-step-info refid="flows" row="0">
         <!-- Retrieve the flow step that has launched the vacation request validation -->
         <flowStepCriteria name="traceCode" value="provideFlowStepBegin" />
         <flowStepCriteria name="flowStepInterfaceName"
                           value="{http://petals.ow2.org/samples/se-flowable/vacation/vacationService}vacation" />
         <flowStepCriteria name="flowStepOperationName"
                           value="{http://petals.ow2.org/samples/se-flowable/vacation/vacationService}validate" />
         <flowStepInfo attribute="flowInstanceId" property="validation-flow-instance-id" />
         <flowStepInfo attribute="flowStepId" property="validation-flow-step-id" />
      </petals-extract-flow-step-info>
      <petals-assert-flow-instance refid="flows" flowInstanceId="${process-instance-flow-instance-id}">
         <!-- Check flow step of the process instance execution -->
         <assertFlowStep flowStepIdx="0">
            <!-- The process instance starts -->
            <attributeEquals name="traceCode" value="consumeExtFlowStepBegin" />
            <attributeEquals name="correlatedFlowInstanceId" value="${initial-flow-instance-id}" />
            <attributeEquals name="correlatedFlowStepId" value="${initial-flow-step-id}" />
            <attributeEquals name="processDefinition" value="vacationRequest" />
            <attributeSet name="processInstanceId" />
            <flowStepInfo attribute="flowStepId" property="flowStep.0.id" />
         </assertFlowStep>
         <assertFlowStep flowStepIdx="1">
            <!-- Service task invokes a Petals service ... -->
            <attributeEquals name="traceCode" value="provideFlowStepBegin" />
            <attributeEquals name="flowStepInterfaceName"
                             value="{http://petals.ow2.org/samples/se-flowable/vacation/notifyVacationService}notifyVacation" />
            <attributeEquals name="flowStepServiceName"
                             value="{http://petals.ow2.org/samples/se-flowable/vacation/notifyVacationService}notifyVacationService" />
            <attributeEquals name="flowStepOperationName"
                             value="{http://petals.ow2.org/samples/se-flowable/vacation/notifyVacationService}newVacationRequest" />
            <attributeSet name="flowStepEndpointName" />
            <attributeEquals name="flowPreviousStepId" value="${flowStep.0.id}" />
            <flowStepInfo attribute="flowStepId" property="flowStep.1.id" />
         </assertFlowStep>
         <assertFlowStep flowStepIdx="2">
            <!-- ... as external web-service -->
            <attributeEquals name="traceCode" value="provideExtFlowStepBegin" />
            <attributeEquals name="flowPreviousStepId" value="${flowStep.1.id}" />
            <attributeEquals name="requestedURL" value="http://localhost:8088/mockNotifyVacationService" />
         </assertFlowStep>
         <assertFlowStep flowStepIdx="3">
            <!-- The vacation request validation user task  -->
            <attributeEquals name="traceCode" value="provideFlowStepBegin" />
            <attributeEquals name="flowPreviousStepId" value="${flowStep.0.id}" />
            <attributeEquals name="taskDefinition" value="handleVacationRequest" />
            <attributeEquals onEnd="true" name="correlatedFlowInstanceId" value="${validation-flow-instance-id}" />
            <attributeEquals onEnd="true" name="correlatedFlowStepId" value="${validation-flow-step-id}" />
         </assertFlowStep>
         <assertFlowStep flowStepIdx="4">
            <!-- Service task invokes a Petals service ... -->
            <attributeEquals name="traceCode" value="provideFlowStepBegin" />
            <attributeEquals name="flowStepInterfaceName"
                             value="{http://petals.ow2.org/samples/se-flowable/vacation/notifyVacationService}notifyVacation" />
            <attributeEquals name="flowStepServiceName"
                             value="{http://petals.ow2.org/samples/se-flowable/vacation/notifyVacationService}notifyVacationService" />
            <attributeEquals name="flowStepOperationName"
                             value="{http://petals.ow2.org/samples/se-flowable/vacation/notifyVacationService}vacationRequestApproved" />
            <attributeSet name="flowStepEndpointName" />
            <attributeEquals name="flowPreviousStepId" value="${flowStep.0.id}" />
         </assertFlowStep>
         <assertFlowStep flowStepIdx="6">
            <!-- Service task invokes a Petals service ... -->
            <attributeEquals name="traceCode" value="provideFlowStepBegin" />
            <attributeEquals name="flowStepInterfaceName"
                             value="{http://petals.ow2.org/samples/se-flowable/vacation/archiveService}archive" />
            <attributeEquals name="flowStepServiceName"
                             value="{http://petals.ow2.org/samples/se-flowable/vacation/archiveService}archiveService" />
            <attributeEquals name="flowStepOperationName"
                             value="{http://petals.ow2.org/samples/se-flowable/vacation/archiveService}archiveVacationRequest" />
            <attributeSet name="flowStepEndpointName" />
            <attributeEquals name="flowPreviousStepId" value="${flowStep.0.id}" />
         </assertFlowStep>
      </petals-assert-flow-instance>

      <echo message="b) Checking that flows are correctly correlated" />
      <echo message="b-1) Checking that flow trees are correctly built" />
      <petals-monit-build-flow-trees refid="flows" id="flow-trees" />
      <echo message="b-2) Checking that we retrieve the expected number of flow trees" />
      <petals-assert-flow-trees refid="flow-trees" assertsizeequals="6" />
      <echo message="b-3) Checking that we retrieve a flow associated to the Flowable process instance" />
      <petals-extract-flow-step-info refid="flows" row="0">
         <flowStepCriteria name="traceCode" value="provideFlowStepBegin" />
         <flowStepCriteria name="flowStepInterfaceName"
                           value="{http://petals.ow2.org/samples/se-flowable/vacation/vacationService}vacation" />
         <flowStepCriteria name="flowStepServiceName"
                           value="{http://petals.ow2.org/samples/se-flowable/vacation/vacationService}vacationService" />
         <flowStepCriteria name="flowStepOperationName"
                           value="{http://petals.ow2.org/samples/se-flowable/vacation/vacationService}new" />
         <flowStepInfo attribute="flowInstanceId" property="initial-flow-instance-id" />
         <flowStepInfo attribute="flowStepId" property="initial-flow-step-id" />
      </petals-extract-flow-step-info>
      <petals-extract-flow-step-info refid="flows" row="0">
         <flowStepCriteria name="traceCode" value="consumeExtFlowStepBegin" />
         <flowStepCriteria name="correlatedFlowInstanceId" value="${initial-flow-instance-id}" />
         <flowStepCriteria name="correlatedFlowStepId" value="${initial-flow-step-id}" />
         <flowStepInfo attribute="flowInstanceId" property="process-flow-instance-id" />
      </petals-extract-flow-step-info>
      <petals-assert-flow-tree refid="flow-trees" flowInstanceId="${initial-flow-instance-id}">
         <assertFlowTreeNode path="">
            <flowInstanceIdEquals expected="${initial-flow-instance-id}" />
         </assertFlowTreeNode>
         <assertFlowTreeNode path="0">
            <flowInstanceIdEquals expected="${process-flow-instance-id}" />
         </assertFlowTreeNode>
      </petals-assert-flow-tree>

      <!-- Sleep few seconds waiting the end of process instances -->
      <!-- TODO: Use a check against MONIT traces to known when the last process instance is ended -->
      <sleep seconds="15" />

      <petals-soapui-test testCase="Nominal TestCase with adjustment" />
      <petals-soapui-test testCase="Faulty TestCase - Unexpected validator" />
      <petals-soapui-test testCase="Faulty TestCase - Unexpected vacation request id" />

      <!-- Sleep few seconds waiting the end of process instances -->
      <!-- TODO: Use a check against MONIT traces to known when the last process instance is ended -->
      <sleep seconds="15" />
      
      <petals-soapui-test testCase="Collaboration TestCase - Nominal" />

      <checkAsyncExecutorMetrics />
      <checkDatabaseConnectionPoolMetrics />
      <checkProcessInstanceCounters />
   </target>

   <!-- Display and check metrics about the asynchronous job executor -->
   <macrodef name="checkAsyncExecutorMetrics">
      <sequential>
         <local name="return-code" />
         <tempfile property="tempfile" prefix="petals-cli" suffix=".out" />
         <echo message="Petals CLI output dumped in: ${tempfile}" />
         <exec executable="./petals-cli.sh"
               dir="${petals.cli.home}/bin"
               output="${tempfile}"
               resultproperty="return-code">
            <arg value="-d" />
            <arg value="-h" />
            <arg value="${host1.ip}" />
            <arg value="-n" />
            <arg value="${host1.port}" />
            <arg value="-u" />
            <arg value="${host1.username}" />
            <arg value="-p" />
            <arg value="${host1.password}" />
            <arg value="-c" />
            <arg value="--" />
            <arg value="monitoring" />
            <arg value="-o" />
            <arg value="petals-se-flowable" />
            <arg value="-f" />
            <arg value="async-job-executor-thread-pool" />
            <arg value="--" />
            <arg value="-n" />
            <arg value="petals-se-flowable" />
            <env key="JAVA_OPTS" value="-ea" />
         </exec>
         <!-- Check that the Petals CLI command execution is succeded -->
         <fail message="Petals CLI command fails">
            <condition>
               <not>
                  <equals arg1="0" arg2="${return-code}" />
               </not>
            </condition>
         </fail>

         <local name="async-executor-threadpool-metrics" />
         <loadfile property="async-executor-threadpool-metrics" srcFile="${tempfile}" />
         <echo message="Asynchronous job executor thread pool metrics: ${async-executor-threadpool-metrics}" />
         <fail message="Unexpected metrics about asynchronous job executor thread pool">
            <condition>
               <not>
                  <matches pattern="ActiveThreadsMax:[0-9]+ ActiveThreadsCurrent:[0-9]+ IdleThreadsMax:[0-9]+ IdleThreadsCurrent:[0-9]+ MaxSize:[0-9]+ MinSize:[0-9]+ EnqueuedRequestsCurrent:[0-9]+ EnqueuedRequestsMax:[0-9]+"
                           string="${async-executor-threadpool-metrics}" />
               </not>
            </condition>
         </fail>
      </sequential>
   </macrodef>

   <!-- Display and check metrics about the database connection pool -->
   <macrodef name="checkDatabaseConnectionPoolMetrics">
      <sequential>
         <local name="return-code" />
         <tempfile property="tempfile" prefix="petals-cli" suffix=".out" />
         <echo message="Petals CLI output dumped in: ${tempfile}" />
         <exec executable="./petals-cli.sh"
               dir="${petals.cli.home}/bin"
               output="${tempfile}"
               resultproperty="return-code">
            <arg value="-d" />
            <arg value="-h" />
            <arg value="${host1.ip}" />
            <arg value="-n" />
            <arg value="${host1.port}" />
            <arg value="-u" />
            <arg value="${host1.username}" />
            <arg value="-p" />
            <arg value="${host1.password}" />
            <arg value="-c" />
            <arg value="--" />
            <arg value="monitoring" />
            <arg value="-o" />
            <arg value="petals-se-flowable" />
            <arg value="-f" />
            <arg value="database-connection-pool" />
            <arg value="--" />
            <arg value="-n" />
            <arg value="petals-se-flowable" />
            <env key="JAVA_OPTS" value="-ea" />
         </exec>
         <!-- Check that the Petals CLI command execution is succeded -->
         <fail message="Petals CLI command fails">
            <condition>
               <not>
                  <equals arg1="0" arg2="${return-code}" />
               </not>
            </condition>
         </fail>

         <local name="database-connection-pool-metrics" />
         <loadfile property="database-connection-pool-metrics" srcFile="${tempfile}" />
         <echo message="Database connection pool metrics: ${database-connection-pool-metrics}" />
         <fail message="Unexpected metrics about database connection pool">
            <condition>
               <not>
                  <matches pattern="MaxActiveSize:[0-9]+ MaxIdleSize:[0-9]+ ActiveConnectionsMax:[0-9]+ ActiveConnectionsCurrent:[0-9]+ IdleConnectionsMax:[0-9]+ IdleConnectionsCurrent:[0-9]+"
                           string="${database-connection-pool-metrics}" />
               </not>
            </condition>
         </fail>
      </sequential>
   </macrodef>


   <!-- Check counters of process instances -->
   <macrodef name="checkProcessInstanceCounters">
      <sequential>
         <parallel>
            <se-flowable.getActiveProcessInstanceCounter component-id="petals-se-flowable"
                                                         process-definition="vacationRequest"
                                                         jmx.host="${host1.ip}"
                                                         jmx.port="${host1.port}"
                                                         jmx.user="${host1.username}"
                                                         jmx.pwd="${host1.password}"
                                                         result-property="vacation-process-instance-active-counter" />
            <se-flowable.getSuspendedProcessInstanceCounter component-id="petals-se-flowable"
                                                            process-definition="vacationRequest"
                                                            jmx.host="${host1.ip}"
                                                            jmx.port="${host1.port}"
                                                            jmx.user="${host1.username}"
                                                            jmx.pwd="${host1.password}"
                                                            result-property="vacation-process-instance-suspended-counter" />
            <se-flowable.getEndedProcessInstanceCounter component-id="petals-se-flowable"
                                                        process-definition="vacationRequest"
                                                        jmx.host="${host1.ip}"
                                                        jmx.port="${host1.port}"
                                                        jmx.user="${host1.username}"
                                                        jmx.pwd="${host1.password}"
                                                        result-property="vacation-process-instance-ended-counter" />
            
            <se-flowable.getActiveProcessInstanceCounter component-id="petals-se-flowable"
                                                         process-definition="masterProcess"
                                                         jmx.host="${host1.ip}"
                                                         jmx.port="${host1.port}"
                                                         jmx.user="${host1.username}"
                                                         jmx.pwd="${host1.password}"
                                                         result-property="master-process-instance-active-counter" />
            <se-flowable.getSuspendedProcessInstanceCounter component-id="petals-se-flowable"
                                                            process-definition="masterProcess"
                                                            jmx.host="${host1.ip}"
                                                            jmx.port="${host1.port}"
                                                            jmx.user="${host1.username}"
                                                            jmx.pwd="${host1.password}"
                                                            result-property="master-process-instance-suspended-counter" />
            <se-flowable.getEndedProcessInstanceCounter component-id="petals-se-flowable"
                                                        process-definition="masterProcess"
                                                        jmx.host="${host1.ip}"
                                                        jmx.port="${host1.port}"
                                                        jmx.user="${host1.username}"
                                                        jmx.pwd="${host1.password}"
                                                        result-property="master-process-instance-ended-counter" />
            
            <se-flowable.getActiveProcessInstanceCounter component-id="petals-se-flowable"
                                                         process-definition="childProcess"
                                                         jmx.host="${host1.ip}"
                                                         jmx.port="${host1.port}"
                                                         jmx.user="${host1.username}"
                                                         jmx.pwd="${host1.password}"
                                                         result-property="child-process-instance-active-counter" />
            <se-flowable.getSuspendedProcessInstanceCounter component-id="petals-se-flowable"
                                                            process-definition="childProcess"
                                                            jmx.host="${host1.ip}"
                                                            jmx.port="${host1.port}"
                                                            jmx.user="${host1.username}"
                                                            jmx.pwd="${host1.password}"
                                                            result-property="child-process-instance-suspended-counter" />
            <se-flowable.getEndedProcessInstanceCounter component-id="petals-se-flowable"
                                                        process-definition="childProcess"
                                                        jmx.host="${host1.ip}"
                                                        jmx.port="${host1.port}"
                                                        jmx.user="${host1.username}"
                                                        jmx.pwd="${host1.password}"
                                                        result-property="child-process-instance-ended-counter" />
         </parallel>
         <fail message="Invalid statistics for process instances">
            <condition>
               <or>
                  <not>
                     <equals arg1="${vacation-process-instance-active-counter}" arg2="0" />
                  </not>
                  <not>
                     <equals arg1="${vacation-process-instance-suspended-counter}" arg2="0" />
                  </not>
                  <not>
                     <equals arg1="${vacation-process-instance-ended-counter}" arg2="4" />
                  </not>
                  <not>
                     <equals arg1="${master-process-instance-active-counter}" arg2="0" />
                  </not>
                  <not>
                     <equals arg1="${master-process-instance-suspended-counter}" arg2="0" />
                  </not>
                  <not>
                     <equals arg1="${master-process-instance-ended-counter}" arg2="1" />
                  </not>
                  <not>
                     <equals arg1="${child-process-instance-active-counter}" arg2="0" />
                  </not>
                  <not>
                     <equals arg1="${child-process-instance-suspended-counter}" arg2="0" />
                  </not>
                  <not>
                     <equals arg1="${child-process-instance-ended-counter}" arg2="1" />
                  </not>
               </or>
            </condition>
         </fail>

      </sequential>
   </macrodef>

   <!-- Target : Clean all -->
   <target name="cleanAll">
      <echo message="Cleaning Flowable component tests..." />

      <cleanContainerArtifacts jmx.host="${host1.ip}"
                               jmx.port="${host1.port}"
                               jmx.user="${host1.username}"
                               jmx.pwd="${host1.password}" />

   </target>

   <!-- Target : Start Web services -->
   <target name="startWebservices">
      <startMocks />
   </target>

   <!-- Target : Wait Web services -->
   <target name="waitWebservices">
      <parallel failonany="yes">
         <waitMock url="http://localhost:8088/mockNotifyVacationService" />
         <waitMock url="http://localhost:8088/mockNotifyTravelingService" />
         <waitMock url="http://localhost:8088/mockArchiveService" />
      </parallel>
   </target>

   <!-- Target : Stop Web services -->
   <target name="stopWebservices">
      <parallel failonany="yes">
         <stopMock url="http://localhost:8088/mockNotifyVacationService" />
         <stopMock url="http://localhost:8088/mockNotifyTravelingService" />
         <stopMock url="http://localhost:8088/mockArchiveService" />
      </parallel>
   </target>

   <target name="launchContainer">
      <replaceregexp file="${petals.home}/conf/loggers.properties"
                     match="org.ow2.petals.log.handler.PetalsFileHandler.level.*"
                     replace="org.ow2.petals.log.handler.PetalsFileHandler.level=FINEST"
                     byline="true" />
      <replaceregexp file="${petals.home}/conf/loggers.properties"
                     match="Petals.Container.Components.level.*"
                     replace="Petals.Container.Components.level=FINEST"
                     byline="true" />

      <startContainer name="${topology.container.name}" home="${petals.home}" jmx.port="${host1.port}" />
   </target>

   <!-- Target : All -->
   <target name="all.env-not-killed-after">
      <antcall target="killAllContainers" />
      <antcall target="launchContainer" />

      <antcall target="cleanAll" />

      <trycatch>
         <try>
            <parallel failonany="yes">
               <startH2Database />
               <antcall target="startWebservices" />
               <sequential>
                  <trycatch>
                     <try>
                        <sequential>
                           <antcall target="prepare" />
                           <antcall target="deploy" />
                           <antcall target="waitWebservices" />
                           <antcall target="run" />
                        </sequential>
                     </try>
                     <finally>
                        <trycatch>
                           <try>
                              <antcall target="stopWebservices" />
                           </try>
                           <catch>
                              <!-- NOP: avoid to fail the build if an error occurs stopping web-services -->
                              <echo message="ERROR: an error occurs when stopping web-services" />
                           </catch>
                        </trycatch>
                     </finally>
                  </trycatch>
               </sequential>
            </parallel>
         </try>
         <finally>
            <!-- We force component uninstallation to avoid stack trace logged by SE Flowable when tests fail. The async job
                 executor of SE Flowable try run SQL query on a database that is not running -->
            <antcall target="cleanAll" />
            <stopH2Database />
         </finally>
      </trycatch>
      <stopContainer name="${topology.container.name}" home="${petals.home}" />

   </target>

   <target name="all">
      <trycatch>
         <try>
            <antcall target="all.env-not-killed-after" />
         </try>
         <finally>
            <antcall target="killAllContainers" />
            <antcall target="killAllRegistryMembers" />
         </finally>
      </trycatch>
   </target>
</project>
