<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2020-2024 Linagora
 
 This program/library is free software: you can redistribute it and/or modify
 it under the terms of the New BSD License (3-clause license).

 This program/library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE. See the New BSD License (3-clause license)
 for more details.

 You should have received a copy of the New BSD License (3-clause license)
 along with this program/library; If not, see http://directory.fsf.org/wiki/License:BSD_3Clause/
 for the New BSD License (3-clause license).
-->
<definitions
   targetNamespace="http://petals.ow2.org/integration/tests/se-flowable/basic/processes/v1"
   xmlns:basic-process="http://petals.ow2.org/integration/tests/se-flowable/basic/processes/v1"
   
   xmlns:logService="http://petals.ow2.org/integration/tests/se-flowable/log/services/v1"
   
   xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
   xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
   xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC"
   xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
   xmlns:flowable="http://flowable.org/bpmn"
   
   typeLanguage="http://www.w3.org/2001/XMLSchema"
   expressionLanguage="http://www.w3.org/1999/XPath">
   
   <import location="logService.wsdl" namespace="http://petals.ow2.org/integration/tests/se-flowable/log/services/v1"
    importType="http://schemas.xmlsoap.org/wsdl/" />

   <process id="basicProcess" name="Basic Process" isExecutable="true">
      <startEvent id="startEventBasicProcess" name="Start" />
      <sequenceFlow id="flow1" sourceRef="startEventBasicProcess" targetRef="log1" />
      <serviceTask id="log1" name="Log #1" implementation="##WebService" operationRef="basic-process:logOp">
         <ioSpecification>
           <dataInput itemSubjectRef="basic-process:logRequestItem" id="dataInputOfLog1" />
           <inputSet>
             <dataInputRefs>dataInputOfLog1</dataInputRefs>
           </inputSet>
           <outputSet />
         </ioSpecification>
         <dataInputAssociation>
           <targetRef>dataInputOfLog1</targetRef>
           <assignment>
             <from>${'INFO'}</from>
             <to>${dataInputOfLog1.level}</to>
           </assignment>
           <assignment>
             <from>${'Current process instance id: '.concat(execution.processInstanceId).concat(', BEFORE user task.')}</from>
             <to>${dataInputOfLog1.message}</to>
           </assignment>
         </dataInputAssociation>
      </serviceTask>
      <sequenceFlow id="flow2" sourceRef="log1" targetRef="usertask1" />
      <userTask id="usertask1" name="User Task" flowable:candidateUsers="kermit" />
      <sequenceFlow id="flow3" sourceRef="usertask1" targetRef="log2" />
      <serviceTask id="log2" name="Log #2" implementation="##WebService" operationRef="basic-process:logOp">
         <ioSpecification>
           <dataInput itemSubjectRef="basic-process:logRequestItem" id="dataInputOfLog2" />
           <inputSet>
             <dataInputRefs>dataInputOfLog2</dataInputRefs>
           </inputSet>
           <outputSet />
         </ioSpecification>
         <dataInputAssociation>
           <targetRef>dataInputOfLog2</targetRef>
           <assignment>
             <from>${'INFO'}</from>
             <to>${dataInputOfLog2.level}</to>
           </assignment>
           <assignment>
             <from>${'Current process instance id: '.concat(execution.processInstanceId).concat(', AFTER user task.')}</from>
             <to>${dataInputOfLog2.message}</to>
           </assignment>
         </dataInputAssociation>
      </serviceTask>
      <sequenceFlow id="flow4" sourceRef="log2" targetRef="endevent1" />
      <endEvent id="endevent1" name="End" />
   </process>
   
   <interface name="Log service" implementationRef="logService:log">
      <operation id="logOp" name="Log operation"
         implementationRef="logService:log">
         <inMessageRef>basic-process:logMessage</inMessageRef>
      </operation>
   </interface>
   
   <message id="logMessage" name="logMsg" itemRef="basic-process:logRequestItem" />
   <itemDefinition id="logRequestItem" structureRef="logService:log" />
</definitions>
