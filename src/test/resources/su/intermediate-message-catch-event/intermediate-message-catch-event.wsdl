<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2017-2024 Linagora
 
 This program/library is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 2.1 of the License, or (at your
 option) any later version.
 
 This program/library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 for more details.
 
 You should have received a copy of the GNU Lesser General Public License
 along with this program/library; If not, see http://www.gnu.org/licenses/
 for the GNU Lesser General Public License version 2.1.
-->
<wsdl:definitions
   name="intermediate-message-catch-event"
   targetNamespace="http://petals.ow2.org/se-flowable/unit-test/intermediate-message-catch-event"
   
   xmlns:tns="http://petals.ow2.org/se-flowable/unit-test/intermediate-message-catch-event"
   
   xmlns:bpmn="http://petals.ow2.org/se/flowable/annotations/1.0"
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
   xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
   xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">

   <wsdl:types>
      <xsd:schema targetNamespace="http://petals.ow2.org/se-flowable/unit-test/intermediate-message-catch-event"
         elementFormDefault="qualified">

         <xsd:complexType name="TStart">
            <xsd:sequence>
               <xsd:element name="customer" type="xsd:string" minOccurs="1" maxOccurs="1" />
               <xsd:element name="address" type="xsd:string" minOccurs="1" maxOccurs="1" />
            </xsd:sequence>
         </xsd:complexType>
         <xsd:element name="start">
            <xsd:complexType>
               <xsd:complexContent>
                  <xsd:extension base="tns:TStart" />
               </xsd:complexContent>
            </xsd:complexType>
         </xsd:element>

         <xsd:element name="start-response">
            <xsd:complexType>
               <xsd:all>
                  <xsd:element name="case-file-number" minOccurs="1" maxOccurs="1" type="xsd:string" />
               </xsd:all>
            </xsd:complexType>
         </xsd:element>
         
         <xsd:element name="unlock">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name="instance-id" type="xsd:string" minOccurs="1" maxOccurs="1" />
                  <xsd:element name="var-1" type="xsd:string" minOccurs="1" maxOccurs="1" />
                  <xsd:element name="var-2" type="xsd:string" minOccurs="1" maxOccurs="1" />
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>
         
         <xsd:element name="unlockAck">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name="ack" type="xsd:string" minOccurs="1" maxOccurs="1" />
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>

         <xsd:element name="instanceUnknown">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name="instance-id" type="xsd:string" minOccurs="1" maxOccurs="1" />
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>

         <xsd:element name="notLocked">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name="instance-id" type="xsd:string" minOccurs="1" maxOccurs="1" />
                  <xsd:element name="event-name" type="xsd:string" minOccurs="1" maxOccurs="1" />
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>

         <xsd:element name="alreadyUnlocked">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name="instance-id" type="xsd:string" minOccurs="1" maxOccurs="1" />
                  <xsd:element name="event-name" type="xsd:string" minOccurs="1" maxOccurs="1" />
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>

      </xsd:schema>
   </wsdl:types>

   <wsdl:message name="start">
      <wsdl:part name="parameters" element="tns:start" />
   </wsdl:message>
   <wsdl:message name="start-response">
      <wsdl:part name="parameters" element="tns:start-response" />
   </wsdl:message>
   <wsdl:message name="unlock">
      <wsdl:part name="parameters" element="tns:unlock" />
   </wsdl:message>
   <wsdl:message name="instanceUnknown">
      <wsdl:part name="fault" element="tns:instanceUnknown" />
   </wsdl:message>
   <wsdl:message name="notLocked">
      <wsdl:part name="fault" element="tns:notLocked" />
   </wsdl:message>
   <wsdl:message name="alreadyUnlocked">
      <wsdl:part name="fault" element="tns:alreadyUnlocked" />
   </wsdl:message>

   <wsdl:portType name="intermediate-message-catch-event">
      <wsdl:operation name="start">
         <wsdl:input message="tns:start" />
         <wsdl:output message="tns:start-response" />
      </wsdl:operation>
      <wsdl:operation name="unlock">
         <wsdl:input message="tns:unlock" />
         <wsdl:output message="tns:unlock">
            <!-- With a MEP RobustInOnly, no output is required but without 'output' the WSDL seems to be invalid -->
         </wsdl:output>
         <wsdl:fault message="tns:instanceUnknown" name="instanceUnknown" />
         <wsdl:fault message="tns:notLocked" name="notLocked" />
         <wsdl:fault message="tns:alreadyUnlocked" name="alreadyUnlocked" />
      </wsdl:operation>
   </wsdl:portType>

   <wsdl:binding name="intermediateMessageCatchEventBinding" type="tns:intermediate-message-catch-event">
      <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http" />
      <wsdl:operation name="start">
         <soap:operation soapAction="http://petals.ow2.org/se-flowable/unit-test/intermediate-message-catch-event/start" />
         <bpmn:operation processDefinitionId="intermediate-message-catch-event" action="startEvent" none-start-event-id="startevent1" />
         <bpmn:userId>/*[local-name()='start']/*[local-name()='customer']</bpmn:userId>
         <bpmn:output>
            startResponse.xsl
         </bpmn:output>
         <wsdl:input>
            <soap:body use="literal" />
         </wsdl:input>
         <wsdl:output>
            <soap:body use="literal" />
         </wsdl:output>
      </wsdl:operation>
      <wsdl:operation name="unlock">
         <soap:operation soapAction="http://petals.ow2.org/se-flowable/unit-test/intermediate-message-catch-event/unlock" />
         <bpmn:operation processDefinitionId="intermediate-message-catch-event" action="intermediateMessageCatch" message-event-name="myMessageName" />
         <bpmn:processInstanceId>/*[local-name()='unlock']/*[local-name()='instance-id']</bpmn:processInstanceId>
         <bpmn:variable name="variable-1" type="string">/*[local-name()='unlock']/*[local-name()='var-1']</bpmn:variable>
         <bpmn:variable name="variable-2" type="string">/*[local-name()='unlock']/*[local-name()='var-2']</bpmn:variable>
         <wsdl:input>
            <soap:body use="literal" />
         </wsdl:input>
         <wsdl:fault name="instanceUnknown">
            <bpmn:fault name="ProcessInstanceNotFoundException">instanceUnknown.xsl</bpmn:fault>
            <soap:fault name="instanceUnknown" use="literal" />
         </wsdl:fault>
         <wsdl:fault name="notLocked">
            <bpmn:fault name="UnexpectedMessageEventException">unexpectedMessageEvent.xsl</bpmn:fault>
            <soap:fault name="notLocked" use="literal" />
         </wsdl:fault>
         <wsdl:fault name="alreadyUnlocked">
            <bpmn:fault name="ProcessInstanceEndedException">messageEventReceived.xsl</bpmn:fault>
            <soap:fault name="alreadyUnlocked" use="literal" />
         </wsdl:fault>
      </wsdl:operation>
   </wsdl:binding>

   <wsdl:service name="intermediate-message-catch-event-service">
      <wsdl:port name="edpIntermediateMessageCatchEvent" binding="tns:intermediateMessageCatchEventBinding">
         <soap:address location="http://localhost:9003/intermediateMessageCatchEvent" />
      </wsdl:port>
   </wsdl:service>

</wsdl:definitions>
